// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`extension should be generate extensions 1`] = `
{
  "lib/models/DataStoreExtension.dart": "// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated extension representing the Todo type in your schema. */
extension TodoExtension on amplify_core.DataStoreCategory {
  Future<Todo> getTodo(String id) {
    return query(
      Todo.classType,
      where: Todo.MODEL_IDENTIFIER.eq(TodoModelIdentifier(id: id)),
    )
    .then((list) => list.single);
  }
  
  Future<Todo?> getTodoOrNull(String id) {
    return query(
      Todo.classType,
      where: Todo.MODEL_IDENTIFIER.eq(TodoModelIdentifier(id: id)),
    )
    .then((list) => list.singleOrNull);
  }
}",
}
`;

exports[`extension should be generate extensions with primaryKey and sortKey 1`] = `
{
  "lib/models/DataStoreExtension.dart": "// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated extension representing the Inventory type in your schema. */
extension InventoryExtension on amplify_core.DataStoreCategory {
  Future<Inventory> getInventory(String productID, String warehouseID) {
    return query(
      Inventory.classType,
      where: Inventory.MODEL_IDENTIFIER.eq(InventoryModelIdentifier(productID: productID, warehouseID: warehouseID)),
    )
    .then((list) => list.single);
  }
  
  Future<Inventory?> getInventoryOrNull(String productID, String warehouseID) {
    return query(
      Inventory.classType,
      where: Inventory.MODEL_IDENTIFIER.eq(InventoryModelIdentifier(productID: productID, warehouseID: warehouseID)),
    )
    .then((list) => list.singleOrNull);
  }
}",
}
`;

exports[`extension should not be generate extensions with primaryKey and sortKey when respectPrimaryKeyAttributesOnConnectionField is false 1`] = `
{
  "lib/models/DataStoreExtension.dart": "// NOTE: This file is generated and may not follow lint rules defined in your app
// Generated files can be excluded from analysis in analysis_options.yaml
// For more info, see: https://dart.dev/guides/language/analysis-options#excluding-code-from-analysis

// ignore_for_file: public_member_api_docs, annotate_overrides, dead_code, dead_codepublic_member_api_docs, depend_on_referenced_packages, file_names, library_private_types_in_public_api, no_leading_underscores_for_library_prefixes, no_leading_underscores_for_local_identifiers, non_constant_identifier_names, null_check_on_nullable_type_parameter, prefer_adjacent_string_concatenation, prefer_const_constructors, prefer_if_null_operators, prefer_interpolation_to_compose_strings, slash_for_doc_comments, sort_child_properties_last, unnecessary_const, unnecessary_constructor_name, unnecessary_late, unnecessary_new, unnecessary_null_aware_assignments, unnecessary_nullable_for_final_variable_declarations, unnecessary_string_interpolations, use_build_context_synchronously

import 'ModelProvider.dart';
import 'package:amplify_core/amplify_core.dart' as amplify_core;


/** This is an auto generated extension representing the Inventory type in your schema. */
extension InventoryExtension on amplify_core.DataStoreCategory {
  Future<Inventory> getInventory(String id) {
    return query(
      Inventory.classType,
      where: Inventory.ID.eq(id: id),
    )
    .then((list) => list.single);
  }
  
  Future<Inventory?> getInventoryOrNull(String id) {
    return query(
      Inventory.classType,
      where: Inventory.ID.eq(id: id),
    )
    .then((list) => list.singleOrNull);
  }
}",
}
`;
